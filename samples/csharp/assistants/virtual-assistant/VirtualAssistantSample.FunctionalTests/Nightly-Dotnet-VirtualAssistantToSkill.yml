pool:
  vmImage: 'windows-2019'
  name: Azure Pipelines
  demands:
  - msbuild
  - visualstudio

variables:
  system.debug: false
  # BotBuilderPackageVersion: Version of the BotBuilder package
  # BuildConfiguration: Build configuration such as Debug or Release
  # BuildPlatform: Build platform such as Win32, x86, x64 or any cpu
  # VirtualAssistantBotAppId: Microsoft App Id of the Virtual Assistant bot
  # VirtualAssistantBotAppPassword: Microsoft App Password of the Virtual Assistant bot
  # VirtualAssistantBotName: Name of the Virtual Assistant bot
  # SkillBotAppId: Microsoft App Id of the Skill bot
  # SkillBotAppPassword: Microsoft App Password of the Skill bot
  # SkillBotName: Name of the Skill bot
  # endpoints.0.endpointUrl: Skill Manifest endpoint url
  # endpoints.0.msAppId: Skill Manifest Microsoft App Id
  # Location: Location of the bot
  # LuisAuthoringRegion: Location of the LUIS apps
  # AzureSubscription: Name of your Azure Subscription
  # BotLanguage: The supported language of your bot

jobs:
- job: VirtualAssistant
  timeoutInMinutes: 0
  dependsOn: Skill
  variables:
    BotName: $(VirtualAssistantBotName)
    BotLanguages: $(BotLanguage)
    BotAppId: $(VirtualAssistantBotAppId)
    BottAppPassword: $(VirtualAssistantBotAppPassword)
    SolutionPath: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample.FunctionalTests/'
    SolutionName: 'VirtualAssistantSample.sln'
    DependenciesPath: 'samples/csharp/assistants/virtual-assistant/**/*.csproj'
    RegexSearch: '("Microsoft\.Bot\.(?!Solutions|Connector.DirectLine)\S+"\s)(Version="\S*")'
    RegexReplace: '$1$(BotBuilderPackageVersion)'
    FunctionalTestProject: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample.sln'
    WorkingDirectory: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample/'
  steps:
  - template: ../../../../../yaml/cleanupResourcesStep.yml
  - template: ../../../../../yaml/useNodeStep.yml
  - template: ../../../../../yaml/useNugetStep.yml
  - template: ../../../../../yaml/npmInstallRequirementsStep.yml
  - template: ../../../../../yaml/dotnetLogVersionsStep.yml
  - template: ../../../../../yaml/setConfigFileStep.yml
  - template: ../../../../../yaml/dotnetBuildStep.yml
  - template: ../../../../../yaml/deployStep.yml

  - pwsh: |
     $appsettings = Get-Content -Path "appsettings.json" | Out-String | ConvertFrom-Json

     Write-Host $appSettings

     $botWebAppName = $appsettings.botWebAppName
     $resourceGroupName= $appsettings.resourceGroupName

     Write-Host "VA Web App Name"
     Write-Host "===="
     Write-Host $botWebAppName
     Write-Host "`r`n"
     echo "##vso[task.setvariable variable=VirtualAssistantBotWebAppName;]$botWebAppName"

     Write-Host "VA Resource Group"
     Write-Host "===="
     Write-Host $resourceGroupName
     echo "##vso[task.setvariable variable=VirtualAssistantBotResourceGroup;]$resourceGroupName"
    workingDirectory: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample/'
    displayName: 'Deploy: VA - Get variables from appsettings'
    failOnStderr: true

  - pwsh: |
     $skillManifestUrl = "https://$(SkillBotWebAppName)/manifest/manifest-1.1.json"

     Write-Host "Skill Manifest"
     Write-Host "===="
     Write-Host $skillManifestUrl
     Write-Host "`r`n"

     botskills connect --remoteManifest "$skillManifestUrl" --luisFolder '..\..\..\skill\SkillSample\Deployment\Resources\LU\' --cs --languages 'en-us' --noRefresh --verbose

     botskills refresh --cs --verbose

    workingDirectory: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample/'
    displayName: 'Test: VA - Connect SkillSample'
    failOnStderr: true

  - task: DotNetCoreCLI@2
    displayName: 'Build: VA - Build project'
    inputs:
      projects: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample.sln'
      arguments: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactstagingdirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site" /property:langversion=latest'
      workingDirectory: 'samples/csharp/assistants/virtual-assistant/'

  - pwsh: '.\Deployment\Scripts\publish.ps1 -name "$(BotName)" -resourceGroup "$(BotName)"'
    errorActionPreference: continue
    workingDirectory: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample/'
    displayName: 'Test: VA - Publish with connected Skill'
    failOnStderr: true

  - template: ../../../../../yaml/setDirectLineStep.yml

  - powershell: |
     $json = Get-Content "DirectLineCreate.json" | Out-String | ConvertFrom-Json
     $key = $json.properties.properties.sites.key

     Write-Host "Direct Line key"
     Write-Host "===="
     Write-Host "$key"
     Write-Host "`r`n"

     echo "##vso[task.setvariable variable=DIRECTLINE;]$key"


     Write-Host "Bot name"
     Write-Host "===="
     Write-Host "DirectLine Bot Name: $(BotName)"
     Write-Host "`r`n"

     echo "##vso[task.setvariable variable=BOTID;]$(BotName)"

    workingDirectory: 'samples/csharp/assistants/virtual-assistant/VirtualAssistantSample/'
    displayName: 'Test: VA - Get channel secrets'
    failOnStderr: true

  - template: ../../../../../yaml/functionalTestsStep.yml
  - template: ../../../../../yaml/cleanupResourcesStep.yml
  - template: ../../../../../yaml/endLogStep.yml

  - script: 'dir ..\*.* /s'
    displayName: 'Debug: dir workspace'
    continueOnError: true
    condition: always()

- job: Skill
  timeoutInMinutes: 0
  variables:
    BotName: $(SkillBotName)
    BotLanguages: $(BotLanguage)
    BotAppId: $(SkillBotAppId)
    BottAppPassword: $(SkillBotAppPassword)
    SolutionPath: 'samples/csharp/skill/'
    SolutionName: 'SkillSample.sln'
    DependenciesPath: 'samples/csharp/skill/**/*.csproj'
    RegexSearch: '("Microsoft\.Bot\.(?!Solutions|Connector.DirectLine)\S+"\s)(Version="\S*")'
    RegexReplace: '$1$(BotBuilderPackageVersion)'
    FunctionalTestProject: 'samples/csharp/skill/SkillSample.sln'
    WorkingDirectory: 'samples/csharp/skill/SkillSample'
  steps:
  - template: ../../../../../yaml/cleanupResourcesStep.yml
  - template: ../../../../../yaml/useNodeStep.yml
  - template: ../../../../../yaml/useNugetStep.yml
  - template: ../../../../../yaml/npmInstallRequirementsStep.yml
  - template: ../../../../../yaml/dotnetLogVersionsStep.yml
  - template: ../../../../../yaml/setConfigFileStep.yml

  - task: FileTransform@1
    displayName: 'Prepare: Replace Skill manifest properties'
    inputs:
      folderPath: samples/csharp/skill/
      fileType: json
      targetFiles: |
       **/wwwroot/manifest/manifest-1.1.json
       **/wwwroot/manifest/manifest-1.0.json

  - template: ../../../../../yaml/dotnetBuildStep.yml
  - template: ../../../../../yaml/deployStep.yml

  - pwsh: |
     $appsettings = Get-Content -Path "appsettings.json" | Out-String | ConvertFrom-Json

     Write-Host $appSettings

     $botWebAppName = $appsettings.botWebAppName
     $resourceGroupName= $appsettings.resourceGroupName
     $url = "$botWebAppName.azurewebsites.net"

     Write-Host "Skill Web App Name"
     Write-Host "===="
     Write-Host $botWebAppName
     echo "##vso[task.setvariable variable=SkillBotWebAppName;]$botWebAppName"

     Write-Host "URL"
     Write-Host "===="
     Write-Host $url
     echo "##vso[task.setvariable variable=SkillBotWebAppUrl;]$url"

     Write-Host "Skill Resource Group"
     Write-Host "===="
     Write-Host $resourceGroupName
     echo "##vso[task.setvariable variable=SkillBotResourceGroup;]$resourceGroupName"
    workingDirectory: samples/csharp/skill/SkillSample
    displayName: 'Deploy: Skill - Get variables from appsettings'
    failOnStderr: true

  - template: ../../../../../yaml/setDirectLineStep.yml

  - powershell: |
     $json = Get-Content "DirectLineCreate.json" | Out-String | ConvertFrom-Json
     $key = $json.properties.properties.sites.key

     Write-Host "Direct Line key"
     Write-Host "===="
     Write-Host "$key"
     Write-Host "`r`n"

     echo "##vso[task.setvariable variable=DIRECTLINE;]$key"

     Write-Host "Bot name"
     Write-Host "===="
     Write-Host "DirectLine Bot Name: $(SkillBotWebAppName)"
     Write-Host "`r`n"

     echo "##vso[task.setvariable variable=BOTID;]$(SkillBotWebAppName)"
    workingDirectory: samples/csharp/skill/SkillSample
    displayName: 'Test: Skill - Get channel secrets'
    failOnStderr: true

  - template: ../../../../../yaml/functionalTestsStep.yml
  - template: ../../../../../yaml/cleanupResourcesStep.yml
  - template: ../../../../../yaml/endLogStep.yml
