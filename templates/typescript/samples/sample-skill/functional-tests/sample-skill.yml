pool:
  vmImage: 'windows-2019'
  name: Azure Pipelines
  demands:
  - msbuild
  - visualstudio

variables:
  system.debug: false
  # system.debug: System variable that can be set by the users. Set this to true to run the release in debug mode to assist in fault-finding.
  # BuildConfiguration: Build configuration such as Debug or Release.
  # BuildPlatform: Build platform such as Win32, x86, x64 or any cpu.
  # AppId: Microsoft App Id of the bot
  # AppPassword: Microsoft App Password of the bot
  # BotName: Name of the bot
  # Location: Location of the bot
  # LuisAuthoringRegion: Location of the LUIS apps
  # PreviewVersion: Version of the SDK's packages that the bot will use
  # ServicePrincipal: App Id of the Service Principal
  # Azure_Tenant: Tenant's value of your Azure directory
  # AzureDevOps-ServicePrincipal-Secret: Secret of the Service Principal
  # AzureSubscription: Name of your Azure Subscription

jobs:
- job: Skill
  timeoutInMinutes: 0
  variables:
    BotType: "Skill"
    BotLanguages: "en-us,es-es,it-it,fr-fr,de-de,zh-cn"
    BotAppId: $(AppId)
    BottAppPassword: $(AppPassword)
    DependenciesPath: 'templates/typescript/samples/functionalTests/$(BotName)/package.json'
    RegexSearch: '("(\bbotbuilder[^:]*(?:-[^:]*)?)|"(\bbotframework(?:-[^:]*))):\s(".*")'
    RegexReplace: '$1:$(PreviewVersion)'
    FunctionalTestProject: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'
    WorkingDirectory: ''
  steps:
  - template: templates/cleanupResourcesStep.yml
  - template: templates/useNodeStep.yml

  - pwsh: |
     # Install botbuilder tools off MyGet
     npm config set registry https://botbuilder.myget.org/F/botbuilder-tools-daily/npm/

     npm i -g botdispatch luis-apis botskills
    displayName: 'Prepare: Install preview dispatch, luis-apis, botskills'
    failOnStderr: true

  - pwsh: |
     # Install generator-bot-virtualassistant from MyGet
     npm config set registry https://botbuilder.myget.org/F/aitemplates/npm/

     npm install -g yo generator-bot-virtualassistant

    displayName: 'Prepare: Install yeoman, generator-bot-virtualassistant'
    failOnStderr: true

  - template: templates/yoCreateBotStep.yml
  - template: templates/setConfigFileSteps.yml
  - template: templates/nodeLogVersions.yml
  - template: templates/nodeBuildSteps.yml
  - template: templates/deploySteps.yml

  - pwsh: |
     $appsettings = Get-Content -Path "appsettings.json" | Out-String | ConvertFrom-Json

     Write-Host $appSettings

     $botWebAppName = $appsettings.botWebAppName
     $resourceGroupName= $appsettings.resourceGroupName

     Write-Host $botWebAppName
     echo "##vso[task.setvariable variable=BOTWEBAPPNAME;]$botWebAppName"

     Write-Host $resourceGroupName
     echo "##vso[task.setvariable variable=BOTRESOURCEGROUP;]$resourceGroupName"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)/src'
    displayName: 'Deploy: Get bot variables from appsettings'
    failOnStderr: true

  - template: templates/setDirectLineSteps.yml

  - powershell: |
     $botName = "$(BOTWEBAPPNAME)"
     Write-Host "DirectLine Bot Name: $botName"

     $json = Get-Content "DirectLineCreate.json" | Out-String | ConvertFrom-Json
     $key = $json.properties.properties.sites.key

     echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
     echo "##vso[task.setvariable variable=BOTID;]$botName"

     Write-Host "DirectLine Key: $key"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Deploy: Get channel secrets'
    failOnStderr: true

  - template: templates/functionalTestsStep.yml

  - template: templates/cleanupResourcesStep.yml

  - template: templates/endLogStep.yml

  - script: 'dir ..\*.* /s'
    displayName: 'Debug: dir workspace'
    continueOnError: true
    condition: always()
