pool:
  vmImage: 'windows-2019'
  name: Azure Pipelines
  demands:
  - msbuild
  - visualstudio

variables:
  system.debug: false
  # system.debug: System variable that can be set by the users. Set this to true to run the release in debug mode to assist in fault-finding.
  # BuildConfiguration: Build configuration such as Debug or Release.
  # BuildPlatform: Build platform such as Win32, x86, x64 or any cpu.
  # AppId: Microsoft App Id of the bot
  # AppPassword: Microsoft App Password of the bot
  # BotName: Name of the bot
  # Location: Location of the bot
  # LuisAuthoringRegion: Location of the LUIS apps
  # PreviewVersion: Version of the SDK's packages that the bot will use
  # ServicePrincipal: App Id of the Service Principal
  # Azure_Tenant: Tenant's value of your Azure directory
  # AzureDevOps-ServicePrincipal-Secret: Secret of the Service Principal
  # AzureSubscription: Name of your Azure Subscription

jobs:
- job: Skill
  timeoutInMinutes: 0
  variables:
    BotName: $(VirtualAssistantBotName)
    BotIsSkill: true
    BotLanguages: "en-us,es-es,it-it,fr-fr,de-de,zh-cn"
    BotAppId: $(AppId)
    BottAppPassword: $(AppPassword)
    FunctionalTestProject: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'
  steps:
  - template: templates/cleanupResourcesStep.yml
  - template: templates/useNodeStep.yml

  - pwsh: |
     # Install botbuilder tools off MyGet
     npm config set registry https://botbuilder.myget.org/F/botbuilder-tools-daily/npm/

     npm i -g botdispatch luis-apis botskills
    displayName: 'Prepare: Install preview dispatch, luis-apis, botskills'

  - pwsh: |
     # Create config file
     $path = Join-Path $env:LOCALAPPDATA "@microsoft" "botframework-cli"

     New-Item -Path $path -ItemType Directory

     $config = @{
         telemetry = $true
     }

     $config | ConvertTo-Json -depth 100 | Out-File $(Join-Path $path "config.json")

     # Install botframework-cli off MyGet
     npm config set registry https://botbuilder.myget.org/F/botframework-cli/npm/

     npm i -g @microsoft/botframework-cli
    displayName: 'Prepare: Install preview botframework-cli'

  - pwsh: |
     # Install generator-bot-virtualassistant from MyGet
     npm config set registry https://botbuilder.myget.org/F/aitemplates/npm/

     npm install -g yo generator-bot-virtualassistant

    displayName: 'Prepare: Install yeoman, generator-bot-virtualassistant'

  - template: templates/yoCreateBotStep.yml
  - template: templates/nodeSetConfigFileSteps.yml
  - template: templates/logVersions.yml
  - template: templates/nodeBuildSteps.yml
  - template: templates/deploySteps.yml

#  - pwsh: |
#     Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
#
#     az login --service-principal --username "$(ServicePrincipal)" --password "$(AzureDevOps-ServicePrincipal-Secret)" --tenant "$(Azure_Tenant)"
#
#     ./deployment/scripts/deploy.ps1 -name $(BotName)  -location $(Location) -languages "en-us,es-es,it-it,fr-fr,de-de,zh-cn" -appId $(AppId) -appPassword $(AppPassword) -createLuisAuthoring -luisAuthoringRegion $(LuisAuthoringRegion) -logFolder "deployment" -luisEndpoint "https://westus.api.cognitive.microsoft.com/luis/api/v2.0"
#    errorActionPreference: continue
#    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
#    displayName: 'Deploy: Run deploy script'
#    continueOnError: true

  - pwsh: |
     $appsettings = Get-Content -Path "appsettings.json" | Out-String | ConvertFrom-Json

     Write-Host $appSettings

     $botWebAppName = $appsettings.botWebAppName
     $resourceGroupName= $appsettings.resourceGroupName

     Write-Host $botWebAppName
     echo "##vso[task.setvariable variable=BOTWEBAPPNAME;]$botWebAppName"

     Write-Host $resourceGroupName
     echo "##vso[task.setvariable variable=BOTRESOURCEGROUP;]$resourceGroupName"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)/src'
    displayName: 'Deploy: Get bot variables from appsettings'

  - template: templates/setDirectLineSteps.yml

  - powershell: |
     $botName = "$(BOTWEBAPPNAME)"
     Write-Host "DirectLine Bot Name: $botName"

     $json = Get-Content "DirectLineCreate.json" | Out-String | ConvertFrom-Json
     $key = $json.properties.properties.sites.key

     echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
     echo "##vso[task.setvariable variable=BOTID;]$botName"

     Write-Host "DirectLine Key: $key"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Deploy: Get channel secrets'

  - task: DotNetCoreCLI@2
    displayName: 'Test: Run dotnet restore'
    inputs:
      command: restore
      projects: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'


  - task: DotNetCoreCLI@2
    displayName: 'Test: Run dotnet build'
    inputs:
      projects: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'

  - template: templates/functionalTestsStep.yml

  - task: AzureCLI@1
    displayName: 'Cleanup: Delete bot resources'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptLocation: inlineScript
      inlineScript: 'az group delete -g $(BotName) --no-wait --yes'

  - pwsh: |
     Write-Host "Deploy log"
     Get-Content -Path $(Join-Path "deployment" "deploy_log.txt")
     Write-Host "Deploy cognitive models log"
     Get-Content -Path $(Join-Path "deployment" "deploy_cognitive_models_log.txt")
     Write-Host "Deploy cognitive models log"
     Get-Content -Path $(Join-Path "deployment" "publish_log.txt")
    errorActionPreference: continue
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Debug: Show log contents'
    condition: always()

  - script: 'dir ..\*.* /s'
    displayName: 'Debug: dir workspace'
    continueOnError: true
    condition: always()
